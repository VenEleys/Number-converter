class Utils:
    nums = "0123456789"
    letters = "abcdefghijklmnopqrstuvwxyz"
    numsLetters = nums+letters
    class HardNum:
        def __init__(self, arg: str) -> None:
            self.num = []
            self.ishard = False
            
            i = 0
            while i < len(arg):
                if arg[i] in Utils.numsLetters:
                    self.num.append(Utils.numsLetters.index(arg[i]))
                    i += 1
                    continue
                if arg[i] == "_":
                    i += 1
                    special_num = ""
                    while arg[i] != "_":
                        special_num += arg[i]
                        i += 1
                    special_num = int(special_num)
                    if special_num > 36:
                        self.ishard = True
                    self.num.append(special_num)
                    i += 1
                    continue
                print("ERROR")

        def __call__(self, *args, **kwds):
            return self.num
        
        def __len__(self):
            return len(self.num)
        
        def __makeEasyNum(self):
            if self.ishard:
                raise IndexError("Can`t make easy num due this num is hard")
            num = ""
            for i in self.num:
                num += Utils.numsLetters[i]
            return num
        
        def __str__(self):
            if not(self.ishard):
                return self.__makeEasyNum()
            num = ""
            for i in self.num:
                if i > 36:
                    i = f"({i})"
                else:
                    i = Utils.numsLetters[i]
                num += str(i)
            return num
        def __iter__(self):
            return iter(self.num)
        
        def __getitem__(self, key):
            return self.num[key]
        
        def __int__(self):
            return int(self.__makeEasyNum())

    def tenToSystem(num: int, system: int, returnStr = True) -> str:
        if isinstance(num,str):
            num = int(num)
        ans: str = ""

        if system > 36:
            while num > 0:
                a = num%system
                num //= system
                if a > 36:
                    a = f'_{a}_'
                else:
                    a = Utils.numsLetters[a]
                ans = a + ans
            return Utils.HardNum(ans)

        while num > 0:
            ans = Utils.numsLetters[num%system] + ans
            num //= system
        if returnStr:
            return ans
        for i in Utils.letters:
            if i in ans:
                raise ValueError("Нельзя перевести число, имеющее буквенные значения, в int")
        return int(ans)
    
    def systemToTen(num: str, system: int, returnStr: bool = False) -> str:
        if not(isinstance(num, Utils.HardNum)):
            num = Utils.HardNum(num)
        ans = 0
        l = len(num)
        for index, i in enumerate(num()):
            ans += i*system**(l-1-index)
    
        if returnStr:
            return int(ans)
        return ans
